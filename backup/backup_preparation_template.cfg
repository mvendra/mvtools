
# Backup preparation configuration template
# Preparation runs are split in two parts: configuration (first pass) and
# processing (second pass).

#################################################################################

# Configuration

# The "reset" option, if specified, will cause this folder to be deleted and then
# recreated before the actual execution.
SET_STORAGE_PATH {reset} = "$THE_PATH"

# If any given target is bigger than the specified size, a warning is issued. If the
# option "abort" is specified, then the preparation will also stop and fail. Sizes can
# be prefixed with "kb", "mb", "gb" and "tb" and are case insensitive.
SET_WARN_SIZE_EACH {abort} = "1024Mb"

# Same as above, but only applies to the end result of the preparation (i.e. the
# SET_STORAGE_PATH)
SET_WARN_SIZE_FINAL {abort} = "1024Mb"

#################################################################################

# Processing

# Copies the specified path to SET_STORAGE_PATH. If "abort" is specified, then if the
# copy fails (path doesn't exist), the preparation fails.
# If the "warn_size" option is specified, its value will be used instead
# of the value specified by SET_WARN_SIZE_EACH. If the "warn_abort" option
# is specified, then the "abort" option of SET_WARN_SIZE_EACH will be overriden
# as well (i.e. having "warn_abort" will activate the abortion of this command
# if it exceeds the specified limit (either by SET_WARN_SIZE_EACH or by the
# "warn_size" option
COPY_PATH {abort / warn_size: "10Mb" / warn_abort} = "/home/user/folder1"

# Calls the "tree" app on the specified path, and saves the output to SET_STORAGE_PATH.
# If "abort" is specified, then if the tree generating fails (path doesn't
# exist), the preparation fails.
COPY_TREE_OUT {abort} = "/home/user/folder2"

# This will call the collect_patches.py script with the given options.
# The path to search for repositories is given by the equality ("/mp" in
# the example below). The options inside the brackets directly translate
# to the commandline arguments of collect_patches.py.
#
# The option "storage-base" specifies a folder name to be attached to SET_STORAGE_PATH, that
# will be used as the final path for the storage path by the collect_patches.py script.
# This final folder is guaranteed (created if it does not pre-exist) but is never
# resetted (deleted then recreated). Only SET_WARN_SIZE_FINAL takes effect for patch collecting
# via this instruction. Since all copying is done by the external script, SET_WARN_SIZE_EACH takes
# no effect, and it can't be overriden in the options, as is the case, for
# example, with the COPY_PATH instruction. If this option is missing, then collect_patches.py will
# be using SET_STORAGE_PATH directly as its storage path.
#
# The options "svn", "git" and "all" are mutually exclusive - only the last will
# be taken into account.
#
# The options "default-include" and "default-exclude" are mutually exclusive - only
# the last will be taken into account.
#
# The options "include" and "exclude" can be freely repeated as many times as
# necessary. For details about what kind of filtering these are able to do,
# see the implementation of collect_patches.py.
#
# The options "head", "head-id", "head-staged", "head-unversioned", "stash" and
# "previous" are idependent from each other and can be used as wanted, as per
# the collect_patches.py script.
RUN_COLLECT_PATCHES { storage-base: "collected_patches" / svn / git / all / default-include / default-exclude / include: "*/Components/*" / exclude: "*/UnwantedRepo/*" / head / head-id / head-staged / head-unversioned / stash / previous: "1" } = "/mp"

# Copies stuff from the system. Valid values:
# "crontab" will copy the user's crontab. If "abort" is specified, then if the
# user's crontab can't be retrieved, the preparation fails.
COPY_SYSTEM {abort} = "crontab"
