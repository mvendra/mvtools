.PHONY : all prepfolders clean compile link 

APPNAME=testappp

BASE=../..
BASE_SRC=$(BASE)/src
BASE_OBJ=$(BASE)/build
RUN=$(BASE)/run

SRC=main.c subfolder/second.c
#SRC_FULL=$(addprefix $(BASE_SRC)/, $(SRC))
#OBJ=$(SRC:.c=.o) 
#OBJ_FULL=$(addprefix $(BASE_OBJ)/, $(OBJ))
COMPILER=gcc

ARCH := $(shell getconf LONG_BIT)
PLAT=linux

ifeq ($(MODE),)
	MODE=debug
endif

UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
	CFLAGS += -D LINUX
	PLAT=linux
endif
ifeq ($(UNAME_S),Darwin)
	CFLAGS += -D OSX
	PLAT=macosx
endif

ifeq ($(ARCH),64)
	CFLAGS = $(INTFLAGS) -m64
else 
	CFLAGS = $(INTFLAGS)
endif

ifeq ($(MODE),debug)
LDFLAGS=-lasan
BASE_OBJ_FULL=$(BASE_OBJ_FULL)_
INTFLAGS = \
	-g \
	-Wall \
	-Wextra \
	-pedantic \
	-Werror \
	-fPIC \
	-fsanitize=address \
	-pthread \
	-D_GLIBCXX_DEBUG \
	-std=c17
POSTBUILD=
#DEFINES= -D _DEBUG -D _LOG 
endif

ifeq ($(MODE),release)
INTFLAGS = \
 	-O2 \
	-Wall \
	-Wextra \
	-pedantic \
	-Werror \
	-fPIC \
	-std=c17
POSTBUILD= strip $(FULL_APP_NAME)
#DEFINES= -D _LOG 
endif

PLAT_ARCH_MODE=$(PLAT)_x$(ARCH)_$(MODE)

INCLUDES=-I$(BASE_SRC)
LDFLAGS+=

BASE_OBJ_FULL=$(BASE_OBJ)/$(PLAT_ARCH_MODE)
RUN_FULL=$(RUN)/$(PLAT_ARCH_MODE)
ALL_OBJS=$(foreach src,$(SRC),$(BASE_OBJ_FULL)/$(notdir $(src:.c=.o)))
FULL_APP_NAME=$(RUN_FULL)/$(APPNAME)

all: prepfolders compile link 

prepfolders:
	@mkdir -p $(BASE_OBJ_FULL)
	@mkdir -p $(RUN_FULL)

compile:
	$(foreach src,$(SRC),$(COMPILER) $(INCLUDES) $(CFLAGS) -c $(BASE_SRC)/$(src) -o $(BASE_OBJ_FULL)/$(notdir $(src:.c=.o));)

link:
	$(COMPILER) -o $(FULL_APP_NAME) $(ALL_OBJS) $(LDFLAGS)
	$(POSTBUILD)

clean:
	$(foreach objs,$(ALL_OBJS),rm -rf $(objs);)
	rm -rf $(FULL_APP_NAME)
